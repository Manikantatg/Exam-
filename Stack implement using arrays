#include <stdio.h>
#include <stdlib.h>

#define MAX 6

// Global variables
int stack[MAX], ele, top = -1;

// Function prototypes
void push(int);
int pop();
void stackStatus();
void display();

int main() 
{ 
    int ch; 
    while (1) 
    {
        printf("\nStack Implementation using Array\n");
        printf("\n1. Push \n2. Pop \n3. Stack Status \n4. Display \n5. Exit \nEnter Your choice: "); 
        scanf("%d", &ch); 

        switch (ch) 
        { 
            case 1: 
                printf("\nEnter element to Push: "); 
                scanf("%d", &ele); 
                push(ele); 
                break; 
            case 2: 
                ele = pop(); 
                if (ele != -1) {
                    printf("\nPopped element from stack: %d\n", ele);
                }
                break; 
            case 3: 
                stackStatus(); 
                break; 
            case 4: 
                display(); 
                break; 
            case 5: 
                exit(0); 
            default:
                printf("\nInvalid choice! Please try again.\n");
        } 
    } 
    return 0;
} 

// Function to push element onto stack
void push(int ele) 
{ 
    if (top == MAX - 1)  // Stack overflow condition
    { 
        printf("\nStack Overflow! Cannot push more elements.\n"); 
    } 
    else
    { 
        stack[++top] = ele;  // Increment top and push element
        printf("\nElement %d pushed onto the stack.\n", ele);
    } 
} 

// Function to pop element from stack
int pop() 
{ 
    if (top == -1)  // Stack underflow condition
    { 
        printf("\nStack Underflow! No elements to pop.\n"); 
        return -1; // Return an error value
    } 
    else
    { 
        return stack[top--];  // Pop last element inserted
    } 
} 

// Function to check stack status
void stackStatus() 
{ 
    if (top == MAX - 1) 
    { 
        printf("\nStack is Full!\n"); 
    } 
    else if (top == -1) 
    { 
        printf("\nStack is Empty!\n");
    }
    else
    {
        printf("\nStack is not full. %d elements present.\n", top + 1);
    }
    display(); 
} 

// Function to display stack elements
void display() 
{ 
    int i; 
    if (top == -1) 
    { 
        printf("\nStack is empty!\n"); 
    }
    else
    { 
        printf("\nStack elements are:\n"); 
        for (i = top; i >= 0; i--) 
        { 
            printf("%d\n", stack[i]); 
        } 
    } 
}
