#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#define MAX 10  // Maximum stack size

// Stack for evaluation
int stack[MAX], top = -1;

// Function Prototypes
void push(int);
int pop();
void eval(int op1, char sym, int op2);

int main() 
{ 
    int i = 0, op1, op2; 
    char exp[20], sym; 
    
    printf("Enter postfix expression: ");
    scanf("%s", exp); 

    for (i = 0; exp[i] != '\0'; i++) 
    { 
        sym = exp[i]; 
        
        if (isdigit(sym))  
        { 
            push(sym - '0'); // Convert char digit to int and push 
        } 
        else 
        { 
            if (top < 1)  
            {
                printf("Error: Invalid postfix expression!\n");
                return 1;
            }

            op2 = pop(); // Pop top element as op2 
            op1 = pop(); // Pop next element as op1 

            eval(op1, sym, op2); // Evaluate expression
        } 
    } 

    if (top == 0)
        printf("Result of given expression = %d\n", pop()); // Final result
    else
        printf("Error: Invalid postfix expression!\n");

    return 0; 
} 

// Push function
void push(int ele) 
{ 
    if (top == MAX - 1) 
    {
        printf("Stack Overflow! Cannot push %d\n", ele);
        exit(1);
    }
    stack[++top] = ele; 
} 

// Pop function with error handling
int pop() 
{ 
    if (top == -1) 
    {
        printf("Stack Underflow! Not enough operands.\n");
        exit(1);
    }
    return stack[top--]; 
} 

// Evaluation function
void eval(int op1, char sym, int op2) 
{ 
    int res; 
    switch (sym) 
    { 
        case '+': res = op1 + op2; break; 
        case '-': res = op1 - op2; break; 
        case '*': res = op1 * op2; break; 
        case '/': 
            if (op2 == 0) 
            {
                printf("Error: Division by zero!\n");
                exit(1);
            }
            res = op1 / op2; 
            break;
        case '%': 
            if (op2 == 0) 
            {
                printf("Error: Modulo by zero!\n");
                exit(1);
            }
            res = op1 % op2; 
            break;
        case '^': 
            res = pow(op1, op2); 
            break;
        default:
            printf("Error: Unknown operator '%c'\n", sym);
            exit(1);
    } 
    push(res); // Push result to stack
}
