#include <stdio.h>
#include <ctype.h>

char stack[20];
int top = -1;

void push(char ele);
char pop();
int priority(char sym);

int main() 
{ 
    int i = 0; 
    char exp[20], sym, ele; 

    printf("Enter a valid Infix expression: "); 
    scanf("%s", exp); 

    printf("\nPostfix Expression: "); 
    for (i = 0; exp[i] != '\0'; i++)  
    { 
        sym = exp[i]; 
        
        if (isalnum(sym)) 
            printf("%c ", sym); // Print operands (numbers/alphabets)
        else if (sym == '(') 
            push(sym); // Push left parenthesis
        else if (sym == ')')  
        { 
            while (top != -1 && (ele = pop()) != '(') 
                printf("%c ", ele); 
        } 
        else  
        { 
            // Pop elements with greater or equal priority
            while (top != -1 && priority(stack[top]) >= priority(sym))
                printf("%c ", pop());  
            push(sym); // Push current operator
        } 
    } 

    // Pop remaining operators in stack
    while (top != -1)  
        printf("%c ", pop());  

    return 0; 
} 

void push(char ele) 
{ 
    stack[++top] = ele; 
} 

char pop() 
{ 
    if (top == -1) 
        return -1; 
    return stack[top--]; 
} 

int priority(char sym)  
{
    if (sym == '(') 
        return 0; 
    if (sym == '+' || sym == '-') 
        return 1; 
    if (sym == '*' || sym == '/' || sym == '%') 
        return 2; 
    if (sym == '^') 
        return 3; 
    return 0; 
}
